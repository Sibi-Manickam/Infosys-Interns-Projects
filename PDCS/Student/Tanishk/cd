# -*- coding: utf-8 -*-
"""Plant_disease_classification-Tanishk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zaoLv4Y8ZeksYu-HyNhqvj7eTbiZzWOH
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import cv2 as cv
import PIL as Image
import os

from google.colab import drive
drive.mount('/content/drive')

!pip install rarfile
!apt-get install unrar

import rarfile

rar_file_path = '/content/drive/My Drive/Preprocessed_Data.rar'

local_extract_path = '/content/Extracted_files'

os.makedirs(local_extract_path, exist_ok=True)

with rarfile.RarFile(rar_file_path) as rf:
    rf.extractall(local_extract_path)

extracted_files = os.listdir(local_extract_path)
print(f'Extracted files and directories: {extracted_files}')

for data in extracted_files:
  data_path = os.path.join(local_extract_path + '/' + data)

data_path

plants = os.listdir(data_path)
print(plants)

print('Types of plant found: ',len(plants))

Disease = []

for plant in plants:
  plant_path = os.path.join(data_path + '/' + plant)
  diseases = os.listdir(plant_path)

  for disease in diseases:
    disease_path = os.path.join(plant_path + str('/' + disease))

    if os.path.exists(disease_path):
      filenames = os.listdir(disease_path)

      for f in filenames:
        file_path = os.path.join(disease_path + '/' + f)
        Disease.append((plant,disease,file_path))

Disease

Disease_df = pd.DataFrame(data = Disease, columns = ['plant', 'disease' , 'file_path'])

Disease_df.head()

Disease_df.tail()

print("Total Images:", len(Disease_df))

from tensorflow import keras
from keras import layers
import matplotlib.pyplot as plt
from keras.models import Sequential, Model
from keras.layers import Input
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import BatchNormalization
from keras.layers import Activation
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.models import load_model
from keras.optimizers import Adam

img_height, img_width = 256, 256
batch_size = 32

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    data_path,
    validation_split=0.2,
    subset="training",
    seed=123,
    label_mode='categorical',
    image_size=(img_height, img_width),
    batch_size=batch_size
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    data_path,
    validation_split=0.2,
    subset= "validation",
    seed=123,
    label_mode="categorical",
    image_size =(img_height,img_width),
    batch_size = batch_size
)

class_names = train_ds.class_names

class_names

resnet_model = Sequential()

pretrained_model = keras.applications.ResNet50(
    include_top=False,
    weights="imagenet",
    input_shape=(256,256,3),
    pooling='avg',
    classes=7,
)

for layer in pretrained_model.layers:
  layer.trainable=False

resnet_model.add(pretrained_model)
resnet_model.add(Flatten())
resnet_model.add(Dense(512,activation='relu'))
resnet_model.add(Dense(7, activation='softmax'))

resnet_model.summary()

resnet_model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])

epochs=10
history =resnet_model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=epochs
)

fig1 = plt.gcf()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.axis(ymin=0.4,ymax=1)
plt.grid()
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train','validation'])
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.grid()
plt.title('Model loss')
plt.ylabel('loss')
plt.xlabel('Epochs')
plt.legend(['train','validation'])
plt.show()

pred = resnet_model.predict(image)

output_class = class_names[np.argmax(pred)]
print("The predicted class is", output_class)
